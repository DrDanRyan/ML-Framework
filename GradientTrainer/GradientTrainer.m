classdef GradientTrainer < handle
% Manages gradient based learning of SupervisedModels.
%
% Key properties that should be set manually before trian() is called:
%
% dataManager - stores training and validation data, and serves batches
%
% model - a model that responds to 'gradient(batch)'
%
% stepCalculator - uses gradients generated by model to determine a step
% direction and size for each batch. Receives parameter updates from
% parameterSchedule as training progresses.
%
% parameterSchedule - updates parameters of stepCalculator as 
% learning progresses.
%
% progressMonitor - computes any relevant progress data (on training
% and/or validation set) and determines when training should terminate
   
   properties
      dataManager % an object that implements the DataManager interface
      model % an object that implements the SupervisedModel interface
      
      % computes and reports performance metrics and can send stop signal 
      % to terminate training
      progressMonitor 
      
      % computes the training parameters used in stepCalculator
      parameterSchedule
      stepCalculator % an object that implements the StepCalculator interface
   end
   
   methods
      function train(obj, maxUpdates)   
         % Trains model until progressMonitor sends stop signal or maxUpdates is
         % reached.
         isContinue = true;
         nUpdates = 0;
         while isContinue
            nUpdates = nUpdates + 1;
            isContinue = obj.update();
            if nUpdates >= maxUpdates
               break;
            end
         end
      end
      
      function isContinue = update(obj)
         % Tells stepCalculator to request gradient from model and update model
         % parameters accordingly. If there is a progressMonitor, it is told to
         % update as well.
         batch = obj.dataManager.next_batch();
         
         if isempty(obj.parameterSchedule)
            params = [];
         else
            params = obj.parameterSchedule.update();
         end
         
         obj.stepCalculator.take_step(batch, obj.model, params);
         
         if ~isempty(obj.progressMonitor)
            isContinue = obj.progressMonitor.update(obj.model, ...
                                                    obj.dataManager); 
         else
            isContinue = true;
         end
      end
      
      function reset(obj)
         % Calls reset() on all properties of the GradientTrainer object
         % that are not empty
         if ~isempty(obj.dataManager)
            obj.dataManager.reset();
         end
         
         if ~isempty(obj.model)
            obj.model.reset();
         end
         
         if ~isempty(obj.progressMonitor)
            obj.progressMonitor.reset();
         end
         
         if ~isempty(obj.parameterSchedule)
            obj.parameterSchedule.reset();
         end
         
         if ~isempty(obj.stepCalculator)
            obj.stepCalculator.reset();
         end
      end
   end      
end

